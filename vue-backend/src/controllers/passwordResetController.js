// src/controllers/passwordResetController.js
import userService from '../services/userService.js';
import passwordResetService from '../services/passwordResetService.js';
import emailService from '../services/emailService.js';

// Validar email
function isValidEmail(email) {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
}

// Validar for√ßa da senha
function isStrongPassword(password) {
  // Pelo menos 6 caracteres, 1 letra e 1 n√∫mero
  const minLength = password.length >= 6;
  const hasLetter = /[a-zA-Z]/.test(password);
  const hasNumber = /\d/.test(password);
  
  return minLength && hasLetter && hasNumber;
}

// 1. SOLICITAR RECUPERA√á√ÉO DE SENHA
export async function requestPasswordReset(req, res) {
  try {
    const { email } = req.body;

    // Valida√ß√µes b√°sicas
    if (!email) {
      return res.status(400).json({
        success: false,
        message: 'Email √© obrigat√≥rio'
      });
    }

    if (!isValidEmail(email)) {
      return res.status(400).json({
        success: false,
        message: 'Email inv√°lido'
      });
    }

    console.log('üîç Solicita√ß√£o de recupera√ß√£o para:', email);

    // Buscar usu√°rio
    const user = await userService.findUserByEmail(email.toLowerCase());
    
    if (!user) {
      // Por seguran√ßa, sempre retorna sucesso mesmo se email n√£o existir
      console.log('‚ùå Email n√£o encontrado:', email);
      return res.status(200).json({
        success: true,
        message: 'Se o email existir em nosso sistema, voc√™ receber√° instru√ß√µes de recupera√ß√£o'
      });
    }

    // Verificar limite de tentativas (m√°ximo 3 em 15 minutos)
    const recentAttempts = await passwordResetService.checkResetAttempts(user.id, 15);
    if (recentAttempts >= 3) {
      console.log('‚ö†Ô∏è Muitas tentativas de recupera√ß√£o:', { email, attempts: recentAttempts });
      return res.status(429).json({
        success: false,
        message: 'Muitas tentativas de recupera√ß√£o. Tente novamente em 15 minutos'
      });
    }

    // Criar token de recupera√ß√£o
    const resetToken = await passwordResetService.createResetToken(user.id);

    // Enviar email
    await emailService.sendPasswordResetEmail(user.email, user.name, resetToken);

    console.log('‚úÖ Recupera√ß√£o processada com sucesso:', { email: user.email });

    return res.status(200).json({
      success: true,
      message: 'Se o email existir em nosso sistema, voc√™ receber√° instru√ß√µes de recupera√ß√£o'
    });

  } catch (error) {
    console.error('‚ùå Erro ao solicitar recupera√ß√£o:', error);
    return res.status(500).json({
      success: false,
      message: 'Erro interno do servidor. Tente novamente mais tarde'
    });
  }
}

// 2. VERIFICAR TOKEN DE RECUPERA√á√ÉO
export async function verifyResetToken(req, res) {
  try {
    const { token } = req.params;

    if (!token) {
      return res.status(400).json({
        success: false,
        message: 'Token √© obrigat√≥rio'
      });
    }

    console.log('üîç Verificando token:', token.substring(0, 8) + '...');

    // Verificar se token √© v√°lido
    const resetData = await passwordResetService.verifyResetToken(token);

    if (!resetData) {
      return res.status(400).json({
        success: false,
        message: 'Token inv√°lido, expirado ou j√° utilizado'
      });
    }

    console.log('‚úÖ Token v√°lido:', { email: resetData.user.email });

    return res.status(200).json({
      success: true,
      message: 'Token v√°lido',
      data: {
        email: resetData.user.email,
        name: resetData.user.name
      }
    });

  } catch (error) {
    console.error('‚ùå Erro ao verificar token:', error);
    return res.status(500).json({
      success: false,
      message: 'Erro interno do servidor'
    });
  }
}

// 3. REDEFINIR SENHA
export async function resetPassword(req, res) {
  try {
    const { token, newPassword, confirmPassword } = req.body;

    // Valida√ß√µes
    if (!token || !newPassword || !confirmPassword) {
      return res.status(400).json({
        success: false,
        message: 'Todos os campos s√£o obrigat√≥rios'
      });
    }

    if (newPassword !== confirmPassword) {
      return res.status(400).json({
        success: false,
        message: 'As senhas n√£o coincidem'
      });
    }

    if (!isStrongPassword(newPassword)) {
      return res.status(400).json({
        success: false,
        message: 'A senha deve ter pelo menos 6 caracteres, incluindo letras e n√∫meros'
      });
    }

    console.log('üîÑ Tentando redefinir senha com token:', token.substring(0, 8) + '...');

    // Redefinir senha
    const result = await passwordResetService.resetPassword(token, newPassword);

    if (!result.success) {
      return res.status(400).json({
        success: false,
        message: 'Erro ao redefinir senha'
      });
    }

    // Enviar email de confirma√ß√£o
    try {
      await emailService.sendPasswordChangedConfirmation(
        result.user.email, 
        result.user.name
      );
    } catch (emailError) {
      console.log('‚ö†Ô∏è Email de confirma√ß√£o n√£o enviado:', emailError.message);
      // N√£o falha o processo principal
    }

    console.log('‚úÖ Senha redefinida com sucesso:', { email: result.user.email });

    return res.status(200).json({
      success: true,
      message: 'Senha redefinida com sucesso'
    });

  } catch (error) {
    console.error('‚ùå Erro ao redefinir senha:', error);
    
    // Tratamento espec√≠fico de erros
    if (error.message.includes('Token inv√°lido')) {
      return res.status(400).json({
        success: false,
        message: 'Token inv√°lido, expirado ou j√° utilizado'
      });
    }

    return res.status(500).json({
      success: false,
      message: 'Erro interno do servidor'
    });
  }
}

// 4. LIMPEZA DE TOKENS (rota administrativa)
export async function cleanExpiredTokens(req, res) {
  try {
    const deletedCount = await passwordResetService.cleanExpiredTokens();
    
    return res.status(200).json({
      success: true,
      message: `${deletedCount} tokens expirados removidos`,
      deletedCount
    });

  } catch (error) {
    console.error('‚ùå Erro ao limpar tokens:', error);
    return res.status(500).json({
      success: false,
      message: 'Erro ao limpar tokens expirados'
    });
  }
}